using Kameyo.Api.Filters;
using Kameyo.Core.Application.Common.Models;
using Kameyo.Infrastructure.Identity.User.Dtos.Request;
using Kameyo.Infrastructure.Identity.User.Dtos.Response;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;


// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace Kameyo.Api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UsersController : ApiControllerBase
    {
        public UsersController()
        {

        }
<<<<<<< HEAD
        
        /*[HttpGet]
        public async Task<ActionResult<Result<UsersDtoResponse>>> Get([FromQuery] GetUserQueryRequest query)
        {
            return BuildResponse(await Mediator.Send(query));
        }*/
=======

        //[HttpGet]
        //public async Task<ActionResult<Result<UsersResponse>>> Get([FromQuery] GetUserQueryRequest query)
        //{
        //    return BuildResponse(await Mediator.Send(query));
        //}
>>>>>>> 98350ed (feat:[259] mantenimiento usuario 20220403_1202)

        //[HttpGet]
        //public async Task<ActionResult<Result<UsersDtoResponse>>> Get([FromQuery] GetUserQueryRequest query)
        //{
        //    return BuildResponse(await Mediator.Send(query));
        //}

        [HttpGet()]
        public async Task<ActionResult<LoadResultModel>> GetLoadOptions(DataSourceLoadOptions loadOptions)
        {
            var query = new GetUsersLoadOptionsQueryRequest() { LoadOptions = loadOptions };
            return BuildResponse(await Mediator.Send(query));
        }

        //[HttpGet("all")]
        //public async Task<ActionResult<Result<UsersDtoResponse>>> GetAll([FromQuery] GetAllUserQueryRequest query)
        //{
        //    return BuildResponse(await Mediator.Send(query));
        //}


        //[HttpGet("paginated")]
        //public async Task<ActionResult<ResultPaginated<UsersDtoResponse>>> GetPaginated([FromQuery] GetUsersPaginationQueryRequest query)
        //{
        //    return BuildResponse(await Mediator.Send(query));
        //}

        //[HttpPost]
        //public async Task<ActionResult<Result<string>>> Post(Dictionary<string, object> values)
        //{

        //    var jsonValue = JsonConvert.SerializeObject(values);
        //    var CommandRequest = new CreateUserCommandRequest();
        //    JsonConvert.PopulateObject(jsonValue, CommandRequest);
        //    CommandRequest.Values = values;


        //    return BuildResponse(await Mediator.Send(CommandRequest));
        //}


        [HttpPost]
        public async Task<ActionResult<Result<string>>> Post([FromBody] CreateUserCommandRequest createUserRequest)
        {
            //[FromBody] CreateUserCommandRequest createUserRequest

            //var jsonValue = JsonConvert.SerializeObject(createUserRequest);
            //var CommandRequest = new CreateUserCommandRequest();
            //JsonConvert.PopulateObject(jsonValue, CommandRequest);
            //CommandRequest.Values = createUserRequest;


            return BuildResponse(await Mediator.Send(createUserRequest));
        }


        
        [HttpPut("{id}")]
        
        public async Task<ActionResult<Result<string>>> Put([FromBody] UpdateUserCommandRequest updateUserRequest, Guid id)
        {
            updateUserRequest.Id = id;
            return BuildResponse(await Mediator.Send(updateUserRequest));
        }

        [HttpDelete("{id}")]
        public async Task<ActionResult<Result<string>>> Delete(string id)
        {
            return BuildResponse(await Mediator.Send(new DeleteUserCommandRequest() { Id = id }));
        }
    }
}
